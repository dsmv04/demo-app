pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                script {
                    node('main') {
                        checkout([$class: 'GitSCM', 
                            branches: [[name: 'main']], 
                            userRemoteConfigs: [[url: 'https://github.com/dsmv04/demo-app']]
                        ])
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    node('main') {
                        bat 'mvn clean package'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    node('master') {
                        withSonarQubeEnv('SonarQube') {
                            bat 'mvn sonar:sonar'
                        }
                    }
                }
            }
        }

        stage('Nexus Deployment') {
            steps {
                script {
                    node('master') {
                        def server = Artifactory.server 'nexus-server'
                        def uploadSpec = """{
                            "files": [
                                {
                                    "pattern": "target/*.jar",
                                    "target": "${NEXUS_REPOSITORY}/"
                                }
                            ]
                        }"""
                        server.upload spec: uploadSpec
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    node('main') {
                        timeout(time: 1, unit: 'HOURS') {
                            waitForQualityGate abortPipeline: true
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                node('master') {
                    cleanWs()
                }
            }
        }
        failure {
            echo 'Build, SonarQube analysis, or Nexus deployment failed.'
        }
    }
}
